package prf_v3_compute;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;



public class prf_v2_Input_Generator  extends Kernel{
    private static final DFEType type = PRFConstants.type;
    private static final DFEType addressType = dfeUInt(32);

    static int p = PRFConstants.p;
    static int q = PRFConstants.q;
    private static final DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(type,p*q+4);
    static int SINGLE_MEM_DEPTH = PRFConstants.MEMORY_DEPTH;
    //log_2 of the memory depth
    static int MEM_ADDRESS_BIT = PRFConstants.MEMORY_ADDRESS_SIZE;

    protected prf_v2_Input_Generator(KernelParameters parameters) {
        super(parameters);


        DFEVector<DFEVar> input = io.input("input_vector", vectorType);
        for(int i =0; i<p;i++){
            for(int j=0; j<q ; j++){

                io.output("input_data_arr"+i+"_"+j,input[(i*q)+j], type);
            }
        }

        
        input[p*q].simWatch("index_i_generator"); 
        input[p*q+1].simWatch("index_j_generator"); 
        input[p*q+2].simWatch("accesstype_generator"); 
        input[p*q+3].simWatch("write_enable_generator"); 
        io.output("index_i",input[p*q].cast(dfeUInt(32)), addressType);
        io.output("index_j",input[p*q+1].cast(dfeUInt(32)), addressType);
        io.output("acc_type",input[p*q+2].cast(dfeUInt(32)), addressType);
        io.output("write_enable",input[p*q+3].cast(dfeUInt(32)), addressType);

    }
}

