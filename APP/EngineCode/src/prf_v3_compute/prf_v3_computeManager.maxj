package prf_v3_compute;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class prf_v3_computeManager extends CustomManager{

    private static final String s_kernelName = "prf_v2_Kernel";
    static int p = PRFConstants.p;
    static int q = PRFConstants.q;

    prf_v3_computeManager(EngineParameters engineParameters){
        super(engineParameters);
        KernelBlock prf_v2_Input_Generator = addKernel(
                new prf_v2_Input_Generator(makeKernelParameters("prf_v2_Input_Generator")));
        KernelBlock PRFOutputGen = addKernel(
                new PRFOutputGen(makeKernelParameters("PRFOutputGen")));
        KernelBlock prf_v2_Kernel = addKernel(
                new prf_v2Kernel(makeKernelParameters("prf_v2_Kernel")));

        //<<<<<< START ADDITION LMEM TRANSFER
		LMemInterface iface = addLMemInterface();
		DFELink cpu2lmem = iface.addStreamToLMem("cpu2lmem", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
		DFELink lmem2cpu = iface.addStreamFromLMem("lmem2cpu", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);

		DFELink fromcpu = addStreamFromCPU("fromcpu");
		DFELink tocpu = addStreamToCPU("tocpu");

		cpu2lmem <== fromcpu;
		tocpu <== lmem2cpu;
		//<<<<<< END ADDITION LMEM TRANSFER

        //CPU INPUTS
		DFELink input_vector = iface.addStreamFromLMem("input_vector",LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
        prf_v2_Input_Generator.getInput("input_vector")<==input_vector;

        //prf_v2_Kernel.getInput("compute")<==addStreamFromCPU("compute");
        //Unpacking output from Input generator
        DFELink index_i = prf_v2_Input_Generator.getOutput("index_i");
        DFELink index_j = prf_v2_Input_Generator.getOutput("index_j");
        DFELink acc_type = prf_v2_Input_Generator.getOutput("acc_type");
        DFELink write_enable = prf_v2_Input_Generator.getOutput("write_enable");


        prf_v2_Kernel.getInput("index_i") <== index_i;
        prf_v2_Kernel.getInput("index_j") <== index_j;
        prf_v2_Kernel.getInput("acc_type") <== acc_type;
        prf_v2_Kernel.getInput("write_enable") <== write_enable;
        DFELink out;
        for(int i =0; i < p;i++)
                for(int j = 0; j< q;j++){
                    prf_v2_Kernel.getInput("input_data_arr"+i+"_"+j) <==  prf_v2_Input_Generator.getOutput("input_data_arr"+i+"_"+j);
                    out = prf_v2_Kernel.getOutput("o_"+i+"_"+j);
                    PRFOutputGen.getInput("o_"+i+"_"+j)<== out;
                }

        DFELink oData = iface.addStreamToLMem("oData",LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
        oData <== PRFOutputGen.getOutput("output");
    }

    public static void main(String[] args) {
        prf_v3_computeEngineParameters params = new prf_v3_computeEngineParameters(args);
        prf_v3_computeManager manager = new prf_v3_computeManager(params);
        manager.config.setDefaultStreamClockFrequency(PRFConstants.FREQUENCY);
        manager.createSLiCinterface(interfaceDefault());
        manager.createSLiCinterface(interfaceWrite("writeLMem"));
        manager.createSLiCinterface(interfaceRead("readLMem"));

        manager.build();
    }

	private static EngineInterface interfaceWrite(String name) {
		EngineInterface ei = new EngineInterface(name);
		CPUTypes   type = PRFConstants.cpu_type;
		InterfaceParam size  = ei.addParam("size", CPUTypes.INT);
		InterfaceParam start = ei.addParam("start", CPUTypes.INT);
		InterfaceParam sizeInBytes = size * type.sizeInBytes();

		ei.setStream("fromcpu", type, sizeInBytes );
		ei.setLMemLinear("cpu2lmem", start * type.sizeInBytes(), sizeInBytes);
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	private static EngineInterface interfaceRead(String name) {
		EngineInterface ei = new EngineInterface(name);
		CPUTypes   type = PRFConstants.cpu_type;
		InterfaceParam size  = ei.addParam("size", CPUTypes.INT);
		InterfaceParam start = ei.addParam("start", CPUTypes.INT);
		InterfaceParam sizeInBytes = size * type.sizeInBytes();

		ei.setLMemLinear("lmem2cpu", start * type.sizeInBytes(), sizeInBytes);
		ei.setStream("tocpu", type, sizeInBytes);
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes   type = PRFConstants.cpu_type;
        int        size = type.sizeInBytes();

        InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);
        InterfaceParam  in_accesses    = engine_interface.addParam("in_accesses", CPUTypes.INT);
        InterfaceParam  M    = engine_interface.addParam("M", CPUTypes.INT);
        InterfaceParam  N1    = engine_interface.addParam("N1", CPUTypes.INT);
        InterfaceParam  caesar_param = engine_interface.addParam("caesar_param", CPUTypes.INT64);


        engine_interface.setScalar("prf_v2_Kernel", "in_accesses", in_accesses);
        engine_interface.setScalar("prf_v2_Kernel","caesar_param",caesar_param);
        engine_interface.setScalar("prf_v2_Kernel","M",M);
        engine_interface.setScalar("prf_v2_Kernel","N",N1);

        engine_interface.setTicks("prf_v2_Input_Generator", N);
        engine_interface.setTicks("prf_v2_Kernel", in_accesses + 2* (M*N1)/(p*q));
        engine_interface.setTicks("PRFOutputGen", N);

        //<<COMMENTED AND ADDED FOR LMEM IMPLEMENTATION>
        //engine_interface.setStream("input_vector", type, N * (size*p*q+size*4));
		InterfaceParam zero = engine_interface.addConstant(0l);
		engine_interface.setLMemLinear("input_vector", zero, N * (size*p*q+size*4));
		engine_interface.setLMemLinear("oData", 2 * N * (size*p*q+size*4), N * (size*p*q));

        //<<COMMENTED AND ADDED FOR LMEM IMPLEMENTATION>

        //engine_interface.setStream("output",type, N * (size*p*q));
		engine_interface.ignoreAll(Direction.IN_OUT);
        return engine_interface;
    }
}





